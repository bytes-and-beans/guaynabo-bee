{#  Displays the current weeks events.  
    Events are pulled from the '' section.

    entry fields
        startTime
        endTime
        simpleUrl
        simpleContent
        eventTags
 #}
{# Hey, change this things name to something other than 'frontpage news', template names should reflect what they do. #}
{# macro defining the days #}
{% macro day(dateString, dayArray) %}
    {# does this day represent this day IRL #}
    {% set isToday =  ("now" | date('d-m-Y')) == dateString %}
    {% set today = date(dateString) %}
    {# day container #}
    <div 
        {# 1/7 ~= 14.28% #}
        class="flex sm:flex-col  sm:flex-grow-0 sm:flex-shrink-0 sm:w-[14.28%]
            border border-guaynabo-gray border-t-0 first:border-t
            sm:border-t sm:border-l-0 sm:first:border-l
        "
    >
        {# day/date box #}
        <div 
            class="flex-grow-0 w-[4.5rem] sm:w-auto relative
                mr-2 sm:mr-0 sm:mb-2
                {{isToday ? 'text-guaynabo-blue' :''}}
            "
        >
            <h3 class="text-center text-3xl">{{ today | date('d') }}</h3>
            <div class="text-center">{{ today | date('l') | lower }}</div>
            <div 
                class="absolute bg-guaynabo-gray 
                    w-px right-0 top-[5%] bottom-[5%]
                    sm:w-auto sm:h-px sm:top-[unset] sm:bottom-0 sm:left-[5%] sm:right-[5%]
                "
            >&nbsp;</div>
        </div>
        {# events listing #}
        <div class="flex flex-col gap-2 px-2">
            {% if (dayArray | length) > 0 %}
            {% for event in dayArray %}
                <a 
                    href="{{ event.simpleUrl.isEmpty() ? event.url : event.simpleUrl.url }}" 
                    class="block"
                >
                    {{ event.title }}
                </a>
            {% endfor %}
            {% else %}
                <div class="">No hay eventos este diá</div>
            {% endif %}
        </div>
    </div>
{% endmacro %} {# end day macro #}

{# macro defining the weeks #}
{% macro week(weekoffset) %}
    {% set firstDayOfWeek = "now" | date_modify(weekoffset ~ " weeks")%}
    {% set weekEventsArray = calenderEntriesWeekly(weekoffset * 7 ) %}

    <div 
        class="w-full flex flex-col sm:flex-row col-start-1 row-start-1"
        x-data="{myWeek: {{weekoffset}} }"
        x-show="myWeek == currentWeek"
    >
        {% for dayOffset in 0..6 %}
            {% set dateInQuestion = firstDayOfWeek | date_modify(dayOffset ~ " days") %}
            {% set dateString = dateInQuestion | date('d-m-Y') %}
            {% set dayArray = weekEventsArray[dateString] ?? {} %}
            {{ _self.day(dateString, dayArray) }}
        {% endfor %}
    </div>    

{% endmacro %} {# end week macro #}

{# this week's calendar #}
<div 
    class="w-full"
    x-data="{
        currentWeek: 0,
        firstWeek: -1,
        finalWeek: 1,
    }"
    x-init="$watch('currentWeek',(newVal, oldVal) => onCurrentWeekChange(newVal,firstWeek, finalWeek));"
    @increment-first-week.window='firstWeek += 1'
    @increment-final-week.window='finalWeek += 1'
>   
    <script>
        const pxdata = document.currentScript.parentElement.__x;
        /** fetch HTML representing a given week,
         * @param offset int number of weeks before or after today to offset results by.
         * @return mixed Returns a new HTML element for the week in question, Or False if it gets a bad response from the server
         */
        async function fetchWeek(offset=0) {
            const response = await fetch('{{currentSite.baseUrl ~ "/calendar/api"}}');
            if( await response.status == 200){
                const html = await response.text();
                const container = document.createElement('div');
                container.innerHTML= html;
                return container.firstChild;
            }
            else {
                return false;
            }
        }
        /** add a week's html element to the stack of weeks
         * @param toFront bool Should this be the new 'first week' at the beginning of the stack?
         * @param element Element The HTML <Element></> to add to the page.
         */
        function addWeek(isFirst, element) {

        }
        /**
         */
        async function onCurrentWeekChange(newVal,firstWeek, finalWeek) {
            let newWeek = false;
            if(newVal == firstWeek){
                newWeek = await fetchWeek(firstWeek - 1);
            }
            else if (newVal == finalWeek) {
                newWeek = await fetchWeek(finalWeek + 1);
            }
            if(newWeek) {
                const isNewFirstWeek = newVal == firstWeek;
                await addweek(isNewFirstWeek, newWeek);
                if(isNewFirstWeek) window.dispatchEvent(new CustomEvent(`increment-first-week`));
                else window.dispatchEvent(new CustomEvent(`increment-final-week`));
            }
        }
    </script>
    <h2 class="text-center">Próximamente</h2>
    {# next/prev buttons #}
    <div class="flex gap-4">
        <div class="" 
            x-on:click="if(currentWeek != firstWeek ) currentWeek -= 1;"
            x-bind:class=" currentWeek == firstWeek ? 'cursor-default' : 'cursor-pointer'"
            x-text="currentWeek == firstWeek ? '&nbsp;' : '&lt;'"

        >
        </div>
        <div class="" 
            x-on:click="if(currentWeek != finalWeek ) currentWeek += 1;"
            x-bind:class=" currentWeek == finalWeek ? 'cursor-default' : 'cursor-pointer'"
            x-text="currentWeek == finalWeek ? '&nbsp;' : '&gt;'"
        >
        </div>
    </div>
    {# container that holds the weeks #}
    <div class="w-full grid overflow-hidden">
        {# The individual days #}
        {# last week #}
        {{ _self.week(-1) }}
        {# this week #}
        {{ _self.week(0) }}
        {# next week #}
        {{ _self.week(1) }}
        
</div>
</div>