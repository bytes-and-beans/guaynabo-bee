{# Buttons and submenus used in the mega menu
    Buttons that have a submenu also contain and generate that submenu.

    required variables
        buttonBlock: matrix block of one of the following types
            directLink: Block with no submenu, it just is a link.
                HeaderDirectLink: Typed link field, the link for this button
                buttonColor: dropdown with following options: blue, purple, green, orange.
            submenu: Block that opens the mega-menu when tapped or scrolled over.
                menuTitle: plain text, thex that will appear on the button
                links: table with the following columns, This is the links of the submenu
                    linkText: single-line text, the text of this link or heading.
                    linkUrl: single-line text, The url this link links too
                    isHeading: checkbox, is this item a top-level heading for the sub menu?
                buttonColor: dropdown with following options: blue, purple, green, orange
#}

{# set a safe default for the buttons gradient color and submenu border color
    Note that the start/stop values are set to the full tailwind classname,
    If this is not done, tailwind will not know to include them in the 
    compiled CSS.
#}
{% switch buttonBlock.buttonColor %}
    {% case "blue" %}
        {% set gradient_start = "from-guaynabo-blue-start" %}
        {% set gradient_end   = "to-guaynabo-blue-end" %}
        {% set submenu_border_color   = "border-guaynabo-blue-end" %}
    {% case "purple" %}
        {% set gradient_start = "from-guaynabo-purple-start" %}
        {% set gradient_end   = "to-guaynabo-purple-end" %}
        {% set submenu_border_color   = "border-guaynabo-purple-end" %}
    {% case "green" %}
        {% set gradient_start = "from-guaynabo-green-start" %}
        {% set gradient_end   = "to-guaynabo-green-end" %}
        {% set submenu_border_color   = "border-guaynabo-green-end" %}
    {% case "orange" %}
        {% set gradient_start = "from-guaynabo-orange-start" %}
        {% set gradient_end   = "to-guaynabo-orange-end" %}
        {% set submenu_border_color   = "border-guaynabo-orange-end" %}
    {% default %}
        {% set gradient_start = "from-guaynabo-blue-start" %}
        {% set gradient_end   = "to-guaynabo-blue-end" %}
        {% set submenu_border_color   = "border-guaynabo-blue-end" %}
{% endswitch %}

{# The button itself #}
<div 
    style="flex-basis:177px"
    class=" flex justify-center items-center cursor-pointer flex-shrink
        hover:bg-gradient-to-tr {{gradient_start}} {{gradient_end}}
    "
    x-data="{open:false}"
    x-on:click="open = !open"
    x-on:click.outside = "open = false"
    x-on:mouseenter="open = true"
    x-on:mouseleave = "open = false"
>
    {% if buttonBlock.type == 'directLink' %} 
       <span class="text-lg font-advantage"> {{buttonBlock.headerDirectLink.getLink()}} </span>
    {% else %}
        <span class="text-lg font-advantage"> {{buttonBlock.menuTitle}} </span>

        {# -_-_- THE MENU DIV -_-_- #}
        {# The mega-menu submenu for this button #}
        <div 
            class="absolute top-full left-0 right-0 p-4 mx-px
                flex space-x-4
                bg-white bg-opacity-90 border {{submenu_border_color}} 
                cursor-auto
            "
            x-cloak
            x-show="open"
            x-on:click.stop=""
            x-transition
        >
        
        {# set some classes that will be reused in multiple places below #}
        {% set listDivClasses = "" %}
        {% set listHeadingClasses = "font-bold" %}
        {% set listItemClasses = "pl-4" %}

        {% for link in buttonBlock.links %}
            {# This get's a little hard to follow so let me explain. 
                The menu of each list. The menu stored in the database is a flat
                flat table, with some entries flagges as 'isHeader'.

                So, what I am doing is putting each list in it's own div and 
                closing the previous list's div and opening a new one each time 
                I hit a new heading entry.

                Also, the "linkUrl" field is optional, so any entry may or may
                not be a link. So even more nested if/else statements for if the
                linkUrl is empty or not, to make this even more visualy confused
            #}
            {% if loop.first %}
                {# open the first list #}
                <div class={{listDivClasses}}>
            {% endif %}
            
            {% if link.isHeading %}
                {% if not loop.first %}
                    {# end previous list and start a new one.  
                       The div for the first list is already opened.
                    #}
                    </div>
                    <div class={{listDivClasses}}>
                {% endif %}
                <div class={{listHeadingClasses}}>
                    {% if link.linkUrl is not empty %}
                        <a href={{link.linkUrl}}>{{link.linkText}}</a>
                    {% else %}
                        {{link.linkText}}
                    {% endif %}
                </div>
            {% else %}
                <div class={{listItemClasses}}>
                    {% if link.linkUrl is not empty %}
                        <a href={{link.linkUrl}}>{{link.linkText}}</a>
                    {% else %}
                        {{link.linkText}}
                    {% endif %}
                </div>
            {% endif %}

            {% if loop.last %}
                {# close the last list #}
                </div>
            {% endif %}
        {% endfor %}

        </div>
    {% endif %}

</div>
